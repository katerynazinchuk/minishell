minishell> NAME = minishell

└ AST_COMMAND: [NAME] [=] [minishell] 
minishell> CC = cc

└ AST_COMMAND: [CC] [=] [cc] 
minishell> CFLAGS = -Wall -Wextra -Werror

└ AST_COMMAND: [CFLAGS] [=] [-Wall] [-Wextra] [-Werror] 
minishell> CFLAGS += -I$(LIBFT_DIR)/include

└ AST_COMMAND: [CFLAGS] [+=] [-I] 
minishell> CFLAGS += -I$(INCLUDE_DIR)

└ AST_COMMAND: [CFLAGS] [+=] [-I] 
minishell> LFLAGS += -lreadline -lncurses

└ AST_COMMAND: [LFLAGS] [+=] [-lreadline] [-lncurses] 
minishell> 
minishell> SRC_DIR = src

└ AST_COMMAND: [SRC_DIR] [=] [src] 
minishell> BUILD_DIR = obj

└ AST_COMMAND: [BUILD_DIR] [=] [obj] 
minishell> INCLUDE_DIR = include

└ AST_COMMAND: [INCLUDE_DIR] [=] [include] 
minishell> 
minishell> LIBFT_DIR = libft

└ AST_COMMAND: [LIBFT_DIR] [=] [libft] 
minishell> LIBFT = libft.a

└ AST_COMMAND: [LIBFT] [=] [libft.a] 
minishell> 
minishell> # Define the source files and object files

└ AST_COMMAND: [#] [Define] [the] [source] [files] [and] [object] [files] 
minishell> BUILD_IN = src/builtins/

└ AST_COMMAND: [BUILD_IN] [=] [src/builtins/] 
minishell> ENV = src/env/env_errors_frees.c \

└ AST_COMMAND: [ENV] [=] [src/env/env_errors_frees.c] [\] 
minishell> 
.git/         Makefile      include/      minishell     result.txt
.gitignore    README.md     libft/        obj/          src/
.vscode/      doc/          main_shell.c  out.txt       test
minishell> src/env/env_operations.c

└ AST_COMMAND: [src/env/env_operations.c] 
minishell> EXECUTOR = src/executor/

└ AST_COMMAND: [EXECUTOR] [=] [src/executor/] 
minishell> LEXER = src/lexer/create_node_list.c \

└ AST_COMMAND: [LEXER] [=] [src/lexer/create_node_list.c] [\] 
minishell> 
.git/         Makefile      include/      minishell     result.txt
.gitignore    README.md     libft/        obj/          src/
.vscode/      doc/          main_shell.c  out.txt       test
minishell> src/lexer/initialize_structs.c \

└ AST_COMMAND: [src/lexer/initialize_structs.c] [\] 
minishell> 
.git/         Makefile      include/      minishell     result.txt
.gitignore    README.md     libft/        obj/          src/
.vscode/      doc/          main_shell.c  out.txt       test
minishell> src/lexer/token_types.c \

└ AST_COMMAND: [src/lexer/token_types.c] [\] 
minishell> 
.git/         Makefile      include/      minishell     result.txt
.gitignore    README.md     libft/        obj/          src/
.vscode/      doc/          main_shell.c  out.txt       test
minishell> src/lexer/lexer.c \

└ AST_COMMAND: [src/lexer/lexer.c] [\] 
minishell> 
.git/         Makefile      include/      minishell     result.txt
.gitignore    README.md     libft/        obj/          src/
.vscode/      doc/          main_shell.c  out.txt       test
minishell> src/lexer/token_word_utils.c \

└ AST_COMMAND: [src/lexer/token_word_utils.c] [\] 
minishell> 
.git/         Makefile      include/      minishell     result.txt
.gitignore    README.md     libft/        obj/          src/
.vscode/      doc/          main_shell.c  out.txt       test
minishell> src/lexer/tokenization_utils.c

└ AST_COMMAND: [src/lexer/tokenization_utils.c] 
minishell> EXPANDER = src/expander/expand_var.c \

└ AST_COMMAND: [EXPANDER] [=] [src/expander/expand_var.c] [\] 
minishell> 
.git/         Makefile      include/      minishell     result.txt
.gitignore    README.md     libft/        obj/          src/
.vscode/      doc/          main_shell.c  out.txt       test
minishell> 
.git/         Makefile      include/      minishell     result.txt
.gitignore    README.md     libft/        obj/          src/
.vscode/      doc/          main_shell.c  out.txt       test
minishell> src/expander/utils.c \

└ AST_COMMAND: [src/expander/utils.c] [\] 
minishell> 
.git/         Makefile      include/      minishell     result.txt
.gitignore    README.md     libft/        obj/          src/
.vscode/      doc/          main_shell.c  out.txt       test
minishell> 
.git/         Makefile      include/      minishell     result.txt
.gitignore    README.md     libft/        obj/          src/
.vscode/      doc/          main_shell.c  out.txt       test
minishell> src/expander/free_exp.c

└ AST_COMMAND: [src/expander/free_exp.c] 
minishell> PARSER = src/parser/parser.c \

└ AST_COMMAND: [PARSER] [=] [src/parser/parser.c] [\] 
minishell> 
.git/         Makefile      include/      minishell     result.txt
.gitignore    README.md     libft/        obj/          src/
.vscode/      doc/          main_shell.c  out.txt       test
minishell> 
.git/         Makefile      include/      minishell     result.txt
.gitignore    README.md     libft/        obj/          src/
.vscode/      doc/          main_shell.c  out.txt       test
minishell> src/parser/redirects.c

└ AST_COMMAND: [src/parser/redirects.c] 
minishell> 
minishell> # SIGNALS = 

└ AST_COMMAND: [#] [SIGNALS] [=] 
minishell> UTILS = src/utils/utils.c \

└ AST_COMMAND: [UTILS] [=] [src/utils/utils.c] [\] 
minishell> 
.git/         Makefile      include/      minishell     result.txt
.gitignore    README.md     libft/        obj/          src/
.vscode/      doc/          main_shell.c  out.txt       test
minishell> src/utils/init_shell.c

└ AST_COMMAND: [src/utils/init_shell.c] 
minishell> 
minishell> ERRORS = src/errors/lexer_error.c \

└ AST_COMMAND: [ERRORS] [=] [src/errors/lexer_error.c] [\] 
minishell> 
.git/         Makefile      include/      minishell     result.txt
.gitignore    README.md     libft/        obj/          src/
.vscode/      doc/          main_shell.c  out.txt       test
minishell> src/errors/common_errors.c

└ AST_COMMAND: [src/errors/common_errors.c] 
minishell> 
minishell> SRC = $(LEXER) $(UTILS) $(ERRORS) $(ENV) $(EXPANDER) $(PARSER) src/main.c 

└ AST_COMMAND: [SRC] [=] [] [] [] [] [] [] [src/main.c] 
minishell> #signal.c

└ AST_COMMAND: [#signal.c] 
minishell> 
minishell> OBJ := $(patsubst src/%.c,obj/%.o,$(SRC))

└ AST_COMMAND: [OBJ] [:=] [] [src/%.c,obj/%.o,] 
minishell> 
minishell> all: $(NAME)

└ AST_COMMAND: [all:] [] 
minishell> 
minishell> $(BUILD_DIR):

└ AST_COMMAND: [] 
minishell> @mkdir -p $(BUILD_DIR)

└ AST_COMMAND: [@mkdir] [-p] [] 
minishell> 
minishell> $(BUILD_DIR)/%.o: $(SRC_DIR)/%.c

└ AST_COMMAND: [] [] 
minishell> @mkdir -p $(dir $@)

└ AST_COMMAND: [@mkdir] [-p] [] [] 
minishell> $(CC) $(CFLAGS) -c $< -o $@

└ AST_COMMAND: [] [] [-c] [] [-o] [] < ->-o 
minishell> 
minishell> $(NAME): $(OBJ) $(LIBFT_DIR)/$(LIBFT)

└ AST_COMMAND: [] [] [] 
minishell> @$(CC) $(OBJ) -L$(LIBFT_DIR) -lft -o $(NAME) $(LFLAGS)

└ AST_COMMAND: [@] [] [-L] [-lft] [-o] [] [] 
minishell> 
minishell> $(LIBFT_DIR)/$(LIBFT):

└ AST_COMMAND: [] 
minishell> @$(MAKE) -C $(LIBFT_DIR)

└ AST_COMMAND: [@] [-C] [] 
minishell> 
minishell> clean:

└ AST_COMMAND: [clean:] 
minishell> @rm -rf $(BUILD_DIR)

└ AST_COMMAND: [@rm] [-rf] [] 
minishell> @$(MAKE) -C $(LIBFT_DIR) clean

└ AST_COMMAND: [@] [-C] [] [clean] 
minishell> @echo "Object files cleaned."

└ AST_COMMAND: [@echo] [Object files cleaned.] 
minishell> 
minishell> fclean: clean

└ AST_COMMAND: [fclean:] [clean] 
minishell> @rm -f $(NAME)

└ AST_COMMAND: [@rm] [-f] [] 
minishell> @$(MAKE) -C $(LIBFT_DIR) fclean

└ AST_COMMAND: [@] [-C] [] [fclean] 
minishell> 
minishell> re: fclean all

└ AST_COMMAND: [re:] [fclean] [all] 
minishell> 
minishell> .PHONY: all clean fclean re

└ AST_COMMAND: [.PHONY:] [all] [clean] [fclean] [re] 
minishell> exit